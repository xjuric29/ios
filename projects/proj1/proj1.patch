--- dirgraph.odevzdany.NEMENIT	2017-04-11 23:38:43.881301532 +0200
+++ dirgraph	2017-04-12 20:26:08.264714571 +0200
@@ -73,7 +73,7 @@
 
 # HISTOGRAMS
 awkPar="100 1024 10240 102400 1048576 10485760 104857600 1073741824"
-J=0
+J=0		# Array index counter
 width=79
 
 if [ -t 1 ]; then		# If script running in terminal 
@@ -100,27 +100,27 @@
 	echo
 }
 
-for I in $awkPar; do		# Counting files sort by size in FSHIST array
-	$i && FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 < size) {print $NF;}}' | awk -F/ -v pattern=$pattern "$awk" | wc -l` || FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 < size) {print $0;}}' | wc -l`
+prev=0		# Previous size of find file for finding in interval <$prev,$awkParItem)
+for I in $awkPar; do		# Counting files sort by size in $FSHIST array
+	$i && FSHIST[$J]=`printf "$tmpFindFile" | awk -v prev=$prev -v max=$I '{if ($7 < max && $7 >= prev) {print $NF;}}' | awk -F/ -v pattern=$pattern "$awk" | wc -l` || FSHIST[$J]=`printf "$tmpFindFile" | awk -v prev=$prev -v max=$I '{if ($7 < max && $7 >= prev) {print $0;}}' | wc -l`
+        prev=$I
 	J=$(($J + 1))
-	if [ $I = 1073741824 ]; then
-		$i && FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 >= size) {print $NF;}}' | awk -F/ -v pattern=$pattern "$awk" | wc -l` || FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 >= size) {print $0;}}' | wc -l`
-	fi
+	if [ $I = 1073741824 ]; then		# Last row of histogram >= GiB
+                $i && FSHIST[$J]=`printf "$tmpFindFile" | awk -v max=$I '{if ($7 >= max) {print $NF;}}' | awk -F/ -v pattern=$pattern "$awk" | wc -l` || FSHIST[$J]=`printf "$tmpFindFile" | awk -v max=$I '{if ($7 >= max) {print $0;}}' | wc -l`
+        fi
 done
 
-gratest=${FSHIST[7]}
-if [ ${FSHIST[8]} -gt $gratest ]; then
-	gratest=${FSHIST[8]}
-fi
+gratest=${FSHIST[0]}		# Find the gratest number of files from array
+for J in {1..8}; do
+	if [ ${FSHIST[$J]} -gt $gratest ]; then
+		gratest=${FSHIST[$J]}
+	fi
+done
 
-#########for I in {0..8}; do
-#########	echo ${FSHIST[$I]}
-#########done
-#########echo "gratest $gratest"
 	
 echo "File size histogram:"
 printf "  <100 B  : "
-printHist $n $histOneWidth $gratest ${FSHIST[1]}
+printHist $n $histOneWidth $gratest ${FSHIST[0]}
 printf "  <1 KiB  : "
 printHist $n $histOneWidth $gratest ${FSHIST[1]}
 printf "  <10 KiB : "
@@ -138,9 +138,6 @@
 printf "  >=1 GiB : "
 printHist $n $histOneWidth $gratest ${FSHIST[8]}
 
-###########echo "$i $n $dir $#"
-###########echo "$histOneWidth"
-
 awkShorter="{
 	len = length (\$0);
         if (len > 40) {
@@ -155,24 +152,35 @@
 		printf \"   :\n\";
 	}
 }"
-FTHISTout=`printf "$tmpFindFile" | awk '{print $NF}' | xargs file -b 2>/dev/null | awk "$awkShorter" | sort 2>/dev/null | uniq -c 2>/dev/null | sort -rn 2>/dev/null | head -10 2>/dev/null`
-FTHISTcount=`echo "$FTHISTout" | wc -l`
+FTHISTcount=0
+
+$i && FTHISTout=`find $dir -type f 2>/dev/null | awk -F/ -v pattern=$pattern "$awk" | xargs -d"\n" file -b 2>/dev/null | awk "$awkShorter" | sort 2>/dev/null | uniq -c 2>/dev/null | sort -rn 2>/dev/null | head -10 2>/dev/null` || FTHISTout=`find $dir -type f 2>/dev/null | xargs -d"\n" file -b 2>/dev/null | awk "$awkShorter" | sort 2>/dev/null | uniq -c 2>/dev/null | sort -rn 2>/dev/null | head -10 2>/dev/null`		# To $FTHISTout save number of file with same type and type in format "      number type:\n"
+
+if [ -n "$tmpFindFile" ]; then
+	FTHISTcount=`echo "$FTHISTout" | wc -l`
+fi
+
 J=0
-for I in `echo "$FTHISTout" | awk '{print $1}'`; do
+for I in `echo "$FTHISTout" | awk '{print $1}'`; do		# To $FTHISTlenght array parse count of same type files from $FTHISTout
 	FTHISTlenght[$J]=$I
 	J=$(($J + 1))
 done
+
 J=0
+IFSbackup=$IFS
 IFS=$'\n'
-for I in `echo "$FTHISTout" | awk -F"\n" '{print substr ($0, 9)}'`; do
+for I in `echo "$FTHISTout" | awk -F"\n" '{print substr ($0, 9)}'`; do		#To $FTHISTfile array parse file types of files from $FTHISTout
         FTHISTfile[$J]="$I"
         J=$(($J + 1))
 done
+
+IFS=$IFSbackup
 echo "File type histogram:"
 if [ -n "$FTHISTout" ]; then	
-	for I in seq 0 $(($FTHISTcount - 1)); do
+	for I in `seq 0 $(($FTHISTcount - 1))`; do
+		#echo $I
 		printf "  ${FTHISTfile[$I]} "
-		printHist $n $histOneWidth $gratest ${FSHIST[$I]}
+		printHist $n $histTwoWidth ${FTHISTlenght[0]} ${FTHISTlenght[$I]}
 	done
 fi
-#echo "$FTHISTout"
+exit 0
