#!/bin/bash

# PARAMETERS
ffmpeg="/home/customshared/iptv/ffmpeg/kollar/ffmpeg-2015-03-19"

parameters_transcode="-threads 4 -vf yadif,scale=720:576 -codec:v libx264 -preset medium -b 1100k -profile:v main -level 4.0 -r 25 -g 125 -codec:a libfdk_aac -ac 2 -ab 128k -ar 48000 -copyts -af aresample=async=5000 -map 0:v -map 0:a -f mpegts -v quiet"
parameters_copy="-codec:v copy -codec:a copy -map 0:v -map 0:a -f mpegts"
parameters_copy4k="-codec:v copy -bsf:v h264_mp4toannexb -codec:a copy -map 0:v -map 0:a -f mpegts"
parameters_copy_noaudio="-codec:v copy -codec:a copy -map 0:v -f mpegts"
# set parametes_<mode> to support other modes

# COMMAND LINE PARSE
dir="$1"
dest="$2"
mode="$3"

if [ -z "$dir" -o -z "$dest" ]; then
    echo "Usage: stream-loopdir <directory> <destination_url> [mode]"
    echo ""
    echo "directory        source directory containing video files starting with 'E-'"
    echo "destination_url  file path, or other URL (e.g. goproxy input URL)"
    echo "mode:"
    echo "    transcode    default, transcode input files"
    echo "    copy         copy input files without trancoding"
    exit 1
fi

if [ -z "$mode" ]; then
    mode=transcode
fi

parametersName="parameters_$mode"
parameters=${!parametersName}

if [ -z "$parameters" ]; then
    echo "Unknown mode $mode"
    exit 1
fi

if [ ! -d "$dir" ]; then
    echo "Directory '$dir' does not exist"
    exit 2
fi


# LOOPING
trap "trap - SIGTERM; kill %1; exit" SIGINT SIGTERM EXIT

last_file=""
next_file=""

while true; do
    # find next file
    for i in {1..2}; do
        next_file=""
        for f in `ls $dir/E-*`; do
            if [[ "$f" > "$last_file" ]]; then
                next_file="$f"
                break
            fi
        done
        last_file="$next_file"
        if [ -n "$next_file" ]; then
            break
        fi
    done

    sleep 1
    if [ -n "$next_file" ]; then
        # process the file
        "$ffmpeg" -i "$next_file" $parameters -
        if [ $? -eq 141 ]; then
            exit
        fi
        sleep 0.2
    else
        # no file, wait for it
        sleep 5
    fi
done | "$ffmpeg" -re -i - -codec:v copy -codec:a copy -map 0:v -map 0:a -f mpegts "$dest" -v quiet &

wait

