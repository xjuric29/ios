#!/usr/bin/env bash

POSIXLY_CORRECT=yes

function error {
	case $1 in
		help) echo "Usage: ./dirgraph [-i PATTERN] [-n] [DIR]" >&2;;
		pattern) echo "Pattern contains source dir path!" >&2;;
		permission) echo "Some files don't have the permission. Are you root?" >&2;;
	esac

}

# COMMAND LINE PARSE
dir="."
i=false
pattern=""
n=false

setopt=":i:n"		# First colon activate silent mode 
while getopts "$setopt" opt; do
	
	if [[ $OPTARG =~ ^-.* ]]; then		# Required argument testing (! -i -n)
		error "help"
        	exit 1
     	fi

	case $opt in
		i) i=true; pattern="$OPTARG";;
		n) n=true;;
		?) error "help"; exit 1;;		# Also starts without -i argument
	esac
done

shift $(($OPTIND - 1))		# On $1 shift dir path

if [ -n "$1" -a -d "$1" -a $# -eq 1 ]; then		# If in $1 is path and the path is existing directory and path is insert just once
	dir=$1
elif [ $# -gt 1 -o -n "$1" -a ! -d "$1" ]; then		# If paths are more or insert path is not dir or exist
	error "help"
	exit 1
fi
if echo "$dir" | egrep "$pattern" > /dev/null 2>&1 && $i; then		# If "$pattern" contains part of "$dir"
	error "pattern"
	exit 1
fi

# HEADER
awk="{
        flag = 0;
        for (i = 1; i <= NF; i++) {
                if ("\$i" ~ pattern) {
                        flag = 1; 
                }
        }
        if (flag == 0) {
                print \$0;
        }
}"
tmpFindFile=`find $dir -type f -ls 2>/dev/null`

if [ $? == 1 ]; then		# If find discover non readable files
	error "permission"
	exit 1
fi
if [ -n "$tmpFindFile" ]; then	# 0 files fix
	tmpFindFile="$tmpFindFile\n"
fi

echo "Root directory: $dir"
$i && echo "Directories: `find $dir -type d 2>/dev/null | awk -F/ -v pattern=$pattern "$awk"| wc -l`" || echo "Directories: `find $dir -type d 2>/dev/null | wc -l`"
$i && echo "All files: `printf "$tmpFindFile" | awk '{print $NF}' | awk -F/ -v pattern=$pattern "$awk"| wc -l`" || echo "All files: `printf "$tmpFindFile" | wc -l`"

# HISTOGRAMS
awkPar="100 1024 10240 102400 1048576 10485760 104857600 1073741824"
J=0
width=79

if [ -t 1 ]; then		# If script running in terminal 
	width=$((`tput cols` - 1)) 
fi

histOneWidth=$((width-12))
histTwoWidth=""

function printHist {		# $1 is bool n, $2 is width of term, $3 is gratest size, $4 is number of files
	if [ $4 -eq 0 ]; then
		echo
		return
	elif $1; then
		constant=$(($2 * $4 / $3))
		for K in `seq 1 $constant`; do
			printf "#"
		done
	else
                for K in `seq 1 $4`; do
			printf "#"
                done
	fi
	echo
}

for I in $awkPar; do		# Counting files sort by size in FSHIST array
	$i && FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 < size) {print $NF;}}' | awk -F/ -v pattern=$pattern "$awk" | wc -l` || FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 < size) {print $0;}}' | wc -l`
	J=$(($J + 1))
	if [ $I = 1073741824 ]; then
		$i && FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 >= size) {print $NF;}}' | awk -F/ -v pattern=$pattern "$awk" | wc -l` || FSHIST[$J]=`printf "$tmpFindFile" | awk -v size=$I '{if ($7 >= size) {print $0;}}' | wc -l`
	fi
done

gratest=${FSHIST[7]}
if [ ${FSHIST[8]} -gt $gratest ]; then
	gratest=${FSHIST[8]}
fi

for I in {0..8}; do
	echo ${FSHIST[$I]}
done
echo "gratest $gratest"
	
echo "File size histogram:"
printf "  <100 B  : "
printHist $n $histOneWidth $gratest ${FSHIST[1]}
printf "  <1 KiB  : "
printHist $n $histOneWidth $gratest ${FSHIST[1]}
printf "  <10 KiB : "
printHist $n $histOneWidth $gratest ${FSHIST[2]}
printf "  <100 KiB: "
printHist $n $histOneWidth $gratest ${FSHIST[3]}
printf "  <1 MiB  : "
printHist $n $histOneWidth $gratest ${FSHIST[4]}
printf "  <10 MiB : "
printHist $n $histOneWidth $gratest ${FSHIST[5]}
printf "  <100 MiB: "
printHist $n $histOneWidth $gratest ${FSHIST[6]}
printf "  <1 GiB  : "
printHist $n $histOneWidth $gratest ${FSHIST[7]}
printf "  >=1 GiB : "
printHist $n $histOneWidth $gratest ${FSHIST[8]}

echo "$i $n $dir $#"
echo "$histOneWidth"

