#!/usr/bin/env bash

POSIXLY_CORRECT=yes

function error {
	case $1 in
		help) echo "Usage: ./dirgraph [-i PATTERN] [-n] [DIR]" >&2;;
		pattern) echo "Pattern contains source dir path!" >&2;;
		permission) echo "Some files don't have the permission. Are you root?" >&2;;
	esac

}

# COMMAND LINE PARSE
dir="."
i=false
pattern=""
n=false

setopt=":i:n"		# First colon activate silent mode 
while getopts "$setopt" opt; do
	
	if [[ $OPTARG =~ ^-.* ]]; then		# Required argument testing (! -i -n)
		error "help"
        	exit 1
     	fi

	case $opt in
		i) i=true; pattern="$OPTARG";;
		n) n=true;;
		?) error "help"; exit 1;;		# Also starts without -i argument
	esac
done

shift $(($OPTIND - 1))		# On $1 shift dir path

if [ -n "$1" -a -d "$1" -a $# -eq 1 ]; then		# If in $1 is path and the path is existing directory and path is insert just once
	dir=$1
elif [ $# -gt 1 -o -n "$1" -a ! -d "$1" ]; then		# If paths are more or insert path is not dir or exist
	error "help"
	exit 1
fi
if echo "$dir" | egrep "$pattern" > /dev/null 2>&1 && $i; then		# If "$pattern" contains part of "$dir"
	error "pattern"
	exit 1
fi

# HEADER
awk="{
        flag = 0;
        for (i = 1; i <= NF; i++) {
                if ("\$i" ~ pattern) {
                        flag = 1; 
                }
        }
        if (flag == 0) {
                print \$0;
        }
}"
tmpFindDir=`find $dir -type d 2>/dev/null`
permError=$?
tmpFindFile=`find $dir -type f 2>/dev/null`
permError=$(($permError + $?))

if [ $permError -gt 0 ]; then		# If find discover non readable files
	error "permission"
	exit 1
fi

echo "Root directory: $dir"
$i && echo "Directories: `echo "$tmpFindDir" | awk -F/ -v pattern=$pattern "$awk"| wc -l`" || echo "Directories: `echo "$tmpFindDir" | wc -l`"
$i && echo "All files: `echo "$tmpFindFile" | awk -F/ -v pattern=$pattern "$awk"| wc -l`" || echo "All files: `echo "$tmpFindFile" | wc -l`"

# HISTOGRAMS
width=79

if [ -t 1 ] ; then		#If script running in terminal 
	width=$((`tput cols` - 1)) 
fi

histOneWidth=$((width-12))
histTwoWidth=""

#function printHist {		#$1 is number of files, 2# is optional width of row
#	if [ -z $2 ]; then
#
#	else
#
#	fi
#	
#}

echo "File size histogram:"
printf "  <100 B  : "
echo "$i $n $dir $#"
echo "$width"

